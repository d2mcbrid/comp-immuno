# -*- coding: utf-8 -*-
"""
Created on Mon Mar 23 15:25:26 2020

@author: davem
"""

## To be used on data stored in Es, Ns, Rs, and f_E, f_N and f_R generated by
## T Cell Expansion Functions 

import matplotlib.pyplot as plt
import numpy as np

#Create the plots that I am going to write my data onto
fig, freqs = plt.subplots(2,2, sharex = 'col', sharey = 'row')
fig, counts = plt.subplots(2,2, sharex = 'col', sharey = 'row')

#initialize a loop to create a plot for each condition (4 conditions, normal, +TGF, +Rapa, +TGF+Rapa)
for i in range(2):
    for j in range(2):
#        The following code unpacks each saved data set for the different conditions into a 
#        set of variables that makes it easy to graph based on how I have written my graphing code
        if i == 0 and j == 0:
            currentData = np.load('C:/Users/davem/OneDrive/Desktop/UCSD Expts/Computational Studies/CRC and TGF-Beta Model/Data Storage/Control_Data.npy')
            countData = currentData[0:3,:]
            freqData = currentData[3:6,:]
            ts = currentData[6,:]
        if i == 0 and j == 1:     
            currentData = np.load('C:/Users/davem/OneDrive/Desktop/UCSD Expts/Computational Studies/CRC and TGF-Beta Model/Data Storage/TGF_Data.npy')
            countData = currentData[0:3,:]
            freqData = currentData[3:6,:]
            ts = currentData[6,:]
        if i == 1 and j == 0:
            currentData = np.load('C:/Users/davem/OneDrive/Desktop/UCSD Expts/Computational Studies/CRC and TGF-Beta Model/Data Storage/Rapa_Data.npy')
            countData = currentData[0:3,:]
            freqData = currentData[3:6,:]
            ts = currentData[6,:]
        if i == 1 and j == 1:
            currentData = np.load('C:/Users/davem/OneDrive/Desktop/UCSD Expts/Computational Studies/CRC and TGF-Beta Model/Data Storage/Combo_Data.npy')
            countData = currentData[0:3,:]
            freqData = currentData[3:6,:]
            ts = currentData[6,:]
            
#        This last piece here makes it so that if I don't want to graph the whol time scale, I can
#        specify a different time to end the graphing
#       ###!!!### Use this one if you want to graph all times ###!!!###
        tEnd = len(ts)
        
#       ###!!!### Use this one if you want the time to end early (in hours) ###!!!###

#        tEnd = 144

        #Further unpacking of data for ease of graphing.
        Ns = countData[0,:tEnd]
        Rs = countData[1,:tEnd]
        Es = countData[2,:tEnd]
        f_N = freqData[0,:tEnd]
        f_R = freqData[1,:tEnd]
        f_E = freqData[2,:tEnd]
        ts = ts[:tEnd]
        
        
        freqs[i,j].plot(ts, Ns, ts, Rs, ts, Es)
        counts[i,j].plot(ts, f_N, ts, f_R, ts, f_E)
        
        